@import "themes.scss";

@mixin themify-body($theme, $map) {
	$theme-map: () !global; // Theme map used in themed function

	@each $key, $value in $map {
		$theme-map: map-merge(
			$theme-map,
			(
				$key: $value,
			)
		) !global;
	}

	@content;

	$theme-map: null !global; // Reset theme map
}

// mixin to generate css for different themes
@mixin themify($themes: $themes) {
	@each $theme, $map in $themes {
		.theme-#{$theme} & {
			@include themify-body($theme, $map) {
				@content;
			}
		}

		// :host-context() allows accessing the theme element higher in the DOM than the current component
		// Must be kept seperate from other declaration, since in global styles.scss :host-context returns an invalid element
		// so would invalidate the other style
		:host-context(.theme-#{$theme}) & {
			--do-not-merge-selectors: 1; // Prevent Angular SASS compiler merging this with above styling
			@include themify-body($theme, $map) {
				@content;
			}
		}
	}
}

// Function to get value from global theme map (defined in themify)
@function themed($key) {
	@return map-get($theme-map, $key);
}

// Example:
// .button {
//		padding: 10px;
//		@include themify($themes) {
//			background-color: themed('buttonBackgroundColor');
//		}
// }
